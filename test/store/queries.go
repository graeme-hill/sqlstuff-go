// This code was generated by a tool (>^_^)>

package store

import (
	"database/sql"
	_ "github.com/lib/pq"
)

type DBClient interface {
	GetCounts() ([]GetCountsResult1, []GetCountsResult2, error)
	GetUsers() ([]GetUsersResult1, []GetUsersResult2, error)
	Close()
}

type SQLDBClient struct {
	db *sql.DB
}

func NewDBClient(connectionString string) (DBClient, error) {
	db, err := sql.Open("postgres", connectionString)
	if err != nil {
		return SQLDBClient{}, err
	}

	return SQLDBClient{
		db: db,
	}, nil
}

func (client SQLDBClient) Close() {
	client.db.Close()
}

/******************************************************************************
 * get_counts
 ****************************************************************************/

type GetCountsResult1 struct {
	UserCount int64
}

type GetCountsResult2 struct {
	GroupCount int64
}

func (client SQLDBClient) GetCounts() (r1 []GetCountsResult1, r2 []GetCountsResult2, err error) {
	sql := "SELECT COUNT(id) as user_count FROM groups;\n\nSELECT COUNT(id) as group_count FROM groups;"
	rows, err := client.db.Query(sql)
	if err != nil {
		return
	}
	defer rows.Close()

	for rows.Next() {
		var (
			userCount int64
		)
		err = rows.Scan(&userCount)
		if err != nil {
			return
		}

		r1 = append(r1, GetCountsResult1{
			UserCount: userCount,
		})
	}

	if !rows.NextResultSet() {
		err = fmt.Errorf("Expecting more result sets: %v", rows.Err())
		return
	}

	for rows.Next() {
		var (
			groupCount int64
		)
		err = rows.Scan(&groupCount)
		if err != nil {
			return
		}

		r2 = append(r2, GetCountsResult2{
			GroupCount: groupCount,
		})
	}

	return
}

/******************************************************************************
 * get_users
 ****************************************************************************/

type GetUsersResult1 struct {
	Id        int32
	Email     string
	FirstName string
	LastName  string
	GroupName string
}

type GetUsersResult2 struct {
	Name string
}

func (client SQLDBClient) GetUsers() (r1 []GetUsersResult1, r2 []GetUsersResult2, err error) {
	sql := "SELECT\n  u.id, u.email, u.first_name, u.last_name, g.name AS group_name\nFROM\n  users u\nLEFT JOIN user_groups ug ON u.id = ug.user_id\nLEFT JOIN groups g ON g.id = ug.group_id;\n\nSELECT name FROM groups;"
	rows, err := client.db.Query(sql)
	if err != nil {
		return
	}
	defer rows.Close()

	for rows.Next() {
		var (
			id        int32
			email     string
			firstName string
			lastName  string
			groupName string
		)
		err = rows.Scan(&id, &email, &firstName, &lastName, &groupName)
		if err != nil {
			return
		}

		r1 = append(r1, GetUsersResult1{
			Id:        id,
			Email:     email,
			FirstName: firstName,
			LastName:  lastName,
			GroupName: groupName,
		})
	}

	if !rows.NextResultSet() {
		err = fmt.Errorf("Expecting more result sets: %v", rows.Err())
		return
	}

	for rows.Next() {
		var (
			name string
		)
		err = rows.Scan(&name)
		if err != nil {
			return
		}

		r2 = append(r2, GetUsersResult2{
			Name: name,
		})
	}

	return
}
